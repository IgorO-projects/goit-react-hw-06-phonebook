{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Container/Container.module.css","components/Filter/Filter.module.css","components/Container/Container.jsx","redux/actions/phonebook-actions.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","reportWebVitals.js","redux/actions/phonebook-reducer.js","redux/store.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","Container","children","className","styles","container","handleContactAdd","createAction","contact","payload","id","uuidv4","name","number","deletedContact","filteredContact","event","currentTarget","value","ContactForm","state","handleChange","setState","nameCheked","contacts","find","onSubmit","preventDefault","props","handlePhoneAdd","items","alert","this","input","type","pattern","title","placeholder","required","onChange","button","Component","connect","dispatch","filter","onChangeFilter","normalizedFilter","toLowerCase","renderedContacts","includes","deletedContactbyId","list","map","list__item","list__text","list__button","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","contactReducer","createReducer","filterReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","phonebookReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.0905adb2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__gm87B\",\"button\":\"ContactForm_button__1MLZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3RIox\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2DoVp\"};","import styles from './Container.module.css';\n\nconst Container = ({ children }) => {\n    return (\n        <div className={styles.container}>\n            {children}\n        </div>\n    );\n};\n\nexport default Container;","// import types from './phonebook-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\n\nexport const handleContactAdd = createAction(\"phonebook/add\", contact => {\n    return {\n        payload: {\n            id: uuidv4(),\n            name: contact.name,\n            number: contact.number,\n        }\n    }\n})\n\nexport const deletedContact = createAction(\"phonebook/delete\")\n\nexport const filteredContact = createAction(\"phonebook/filter\", event => {\n    return {\n        payload: event.currentTarget.value\n    }\n})\n\n// export const handleContactAdd = contact => ({\n//     type: types.ADD,\n//     payload: {\n//         id: uuidv4(),\n//         name: contact.name,\n//         number: contact.number,\n//     }\n// })\n\n// export const deletedContact = id => ({\n//     type: types.DELETE,\n//     payload: id,\n// })\n\n// export const filteredContact = event => ({\n//     type: types.FILTER,\n//     payload: event.currentTarget.value,\n// })","import PropTypes from 'prop-types';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport styles from './ContactForm.module.css';\nimport { handleContactAdd } from '../../redux/actions/phonebook-actions';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  }\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  nameCheked = ( contacts, name ) => {\n    return contacts.find(contact => name === contact.name);\n  }\n\n  onSubmit = event => {\n    event.preventDefault();\n\n    const { name, number } = this.state;\n    const { handlePhoneAdd, contacts } = this.props;\n    const contact = { name, number };\n\n    if(this.nameCheked(contacts.items, name)) {\n        alert(`${name} is already in Phonebook`)\n        return;\n      }   \n\n    handlePhoneAdd(contact)\n  }\n\n  \n  render() {\n\n    return (\n      <form onSubmit={this.onSubmit} >\n        <label>\n          <br/>\n          <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          placeholder=\"Name\"\n          required\n          value={this.state.name}\n          onChange={this.handleChange}\n          />\n        </label>\n        <br/>\n        <label>\n          <br/>\n          <input\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          placeholder=\"Number\"\n          required\n          value={this.state.number}\n          onChange={this.handleChange}\n          />\n        </label>\n        <br/>\n        <button\n        className={styles.button}\n        type=\"submit\"\n        >Add contact</button>\n      </form>\n  );\n  }\n};\n\nContactForm.propTypes = {\n    handlePhoneAdd: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => state;\n\nconst mapDispatchToProps = dispatch => ({\n  handlePhoneAdd: (name) => dispatch(handleContactAdd(name)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport styles from './Filter.module.css';\nimport { filteredContact } from '../../redux/actions/phonebook-actions';\n\n\nconst Filter = ({ filter, onChangeFilter }) => {\n    return (\n        <form>\n          <label>\n            <input\n            className={styles.input}\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={onChangeFilter}\n            placeholder=\"Find person\"\n            />\n          </label>\n        </form>\n    )\n}\n\nFilter.propTypes = { \n    filter: PropTypes.string.isRequired,\n    onChangeFilter: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  filter: state.contacts.filter,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeFilter: event => dispatch(filteredContact(event))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport styles from './ContactList.module.css';\nimport { deletedContact } from '../../redux/actions/phonebook-actions';\n\nconst ContactList = ({ renderedContacts, deletedContactbyId }) => {\n    return (\n        <ul className={styles.list}>\n          {renderedContacts.map(contact => {\n            return (\n              <li \n              className={styles.list__item}\n              key={contact.id}>\n                <span\n                className={styles.list__text}\n                >{contact.name}: {contact.number}</span>\n                <button\n                id={contact.id}\n                className={styles.list__button}\n                type=\"button\"\n                onClick={deletedContactbyId}\n                >delete</button>\n              </li>\n            )\n          })}\n        </ul>\n    )\n}\n\nContactList.propTypes = {\n    renderedContacts: PropTypes.array.isRequired,\n};\n\n// const filteredContacts = () => {\n//   const { filter, contacts } = this.state;\n//   const normalizedFilter = filter.toLowerCase();\n  \n//   if(filter) {\n//     return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n//   }\n//   return contacts;\n// }\n\nconst mapStateToProps = state => {\n  const { contacts } = state;\n  \n  if(contacts.filter) {\n    const normalizedFilter = contacts.filter.toLowerCase(); \n    const filtredContacts = contacts.items.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n\n    return {\n      renderedContacts: filtredContacts,\n    }\n  }  \n\n  return {\n    renderedContacts: contacts.items,\n  }\n \n}\n\nconst mapDispatchToProps = dispatch => ({\n  deletedContactbyId: event => {dispatch(deletedContact(event.currentTarget.id))}\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import { Component } from \"react\";\n// import { v4 as uuidv4 } from 'uuid';\n\nimport Container from './components/Container';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nclass App extends Component {\n  // state = {\n  //   contacts: [\n  //     {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n  //     {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n  //     {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n  //     {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n  //   ],\n  //   filter: '',\n  // }\n\n  // componentDidMount() {\n\n  //   const savedContacts = localStorage.getItem('savedContacts');\n  //   const parsedContacts = JSON.parse(savedContacts);\n    \n  //   if(parsedContacts) {\n  //     this.setState({ contacts: [...parsedContacts] })\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n\n  //   if(prevState.contacts !== this.state.contacts) {\n  //     localStorage.setItem('savedContacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  // nameCheked = ( contacts, name ) => {\n  //   return contacts.find(contact => name === contact.name);\n  // }\n\n  // handlePhoneAdd = contact => {\n  //   const { contacts } = this.state;\n  //   const { name, number } = contact;\n    \n  //   const id = uuidv4();\n  //   const doublCheckedName = this.nameCheked(contacts, name);\n\n  //   if(doublCheckedName) {\n  //     alert(`${name} is already in Phonebook`)\n  //     return;\n  //   }\n\n  //   this.setState( prevState => ({\n  //     contacts: [...prevState.contacts, { id: id, name: name, number: number }]}\n  //   ));\n  // };\n\n  // onChangeFilter = event => {\n  //    this.setState({ filter: event.currentTarget.value});\n  // }\n\n  // filteredContacts = () => {\n  //   const { filter, contacts } = this.state;\n  //   const normalizedFilter = filter.toLowerCase();\n    \n  //   if(filter) {\n  //     return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  //   }\n  //   return contacts;\n  // }\n\n  // deletedContactbyId = (id) => {\n  //   this.setState(prevState=> ({\n  //     contacts: prevState.contacts.filter(contact => contact.id !== id)\n  //   }))\n  // }\n\n  render () {\n    // const { filter } = this.state;\n    // const renderedContacts = this.filteredContacts();\n\n    return (\n      <Container>\n        <h1>Phonebook</h1>\n        <ContactForm \n        // handlePhoneAdd={this.handlePhoneAdd}\n        />\n        <h2>Contacts</h2>\n        <Filter \n        // filter={filter}\n        // onChangeFilter={this.onChangeFilter}\n        />\n        <ContactList \n        // renderedContacts={renderedContacts}\n        // deletedContactbyId={this.deletedContactbyId}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\n// import types from './phonebook-types';\nimport { handleContactAdd, deletedContact, filteredContact } from '../actions/phonebook-actions';\n\nconst initialState = [\n    {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n    {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n    {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n    {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n];\n\nconst contactReducer = createReducer(initialState, {\n    [handleContactAdd]: (state, { payload }) => [...state, payload],\n    [deletedContact]: (state, { payload }) => state.filter(contact => contact.id !== payload),\n})\n\nconst filterReducer = createReducer('', {\n    [filteredContact]: (_, { payload }) => payload,\n})\n\n// const contactReducer = (state = initialState, { type, payload }) => {\n//     switch(type) {\n//         case types.ADD:\n//             return [...state, payload] \n            \n//         case types.DELETE:\n//             return state.filter(contact => contact.id !== payload)\n        \n//         default:\n//             return state;\n//     }\n// }\n\n// const filterReducer = (state = '', { type, payload }) => {\n//     switch(type) {\n//         case types.FILTER:\n//             return payload;\n\n//         default: \n//             return state;\n//     }\n    \n// }\n\nexport default combineReducers({\n    items: contactReducer,\n    filter: filterReducer\n})\n\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport phonebookReducer from './actions/phonebook-reducer';\nimport { \n    persistStore, \n    persistReducer, \n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\n// import { combineReducers } from \"redux\";\n// import { composeWithDevTools } from 'redux-devtools-extension';\n\n// const rootReducer = combineReducers({\n//   contacts: phonebookReducer,\n// })\n\n//   const store = createStore(rootReducer, composeWithDevTools());\n\nconst middleware = [...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  }), logger];\n\nconst persistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\n// const rootReducer = combineReducers({\n//   contacts: phonebookReducer,\n// });\n\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n    reducer: {\n        contacts: persistReducer(persistConfig, phonebookReducer)\n    },\n    middleware, \n    devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}> \n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"list__item\":\"ContactList_list__item__2uVIv\",\"list__text\":\"ContactList_list__text__1taay\",\"list__button\":\"ContactList_list__button__2Ij86\"};"],"sourceRoot":""}